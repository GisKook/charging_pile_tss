// Code generated by protoc-gen-go.
// source: charge_pile_status.proto
// DO NOT EDIT!

/*
Package Report is a generated protocol buffer package.

It is generated from these files:
	charge_pile_status.proto
	charge_station_status.proto

It has these top-level messages:
	ChargingPileStatus
	ChargingStationStatus
*/
package Report

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChargingPileStatus_ChargingPileStatusType int32

const (
	ChargingPileStatus_IDLE         ChargingPileStatus_ChargingPileStatusType = 0
	ChargingPileStatus_CHARGING     ChargingPileStatus_ChargingPileStatusType = 1
	ChargingPileStatus_TOBECHARGING ChargingPileStatus_ChargingPileStatusType = 2
	ChargingPileStatus_FULL         ChargingPileStatus_ChargingPileStatusType = 3
	ChargingPileStatus_MAINTAINACE  ChargingPileStatus_ChargingPileStatusType = 4
	ChargingPileStatus_OFFLINE      ChargingPileStatus_ChargingPileStatusType = 5
)

var ChargingPileStatus_ChargingPileStatusType_name = map[int32]string{
	0: "IDLE",
	1: "CHARGING",
	2: "TOBECHARGING",
	3: "FULL",
	4: "MAINTAINACE",
	5: "OFFLINE",
}
var ChargingPileStatus_ChargingPileStatusType_value = map[string]int32{
	"IDLE":         0,
	"CHARGING":     1,
	"TOBECHARGING": 2,
	"FULL":         3,
	"MAINTAINACE":  4,
	"OFFLINE":      5,
}

func (x ChargingPileStatus_ChargingPileStatusType) String() string {
	return proto.EnumName(ChargingPileStatus_ChargingPileStatusType_name, int32(x))
}
func (ChargingPileStatus_ChargingPileStatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type ChargingPileStatus struct {
	DasUuid          string                                    `protobuf:"bytes,1,opt,name=das_uuid" json:"das_uuid,omitempty"`
	Cpid             uint64                                    `protobuf:"varint,2,opt,name=cpid" json:"cpid,omitempty"`
	Status           ChargingPileStatus_ChargingPileStatusType `protobuf:"varint,3,opt,name=status,enum=Report.ChargingPileStatus_ChargingPileStatusType" json:"status,omitempty"`
	ChargingDuration uint32                                    `protobuf:"varint,4,opt,name=ChargingDuration" json:"ChargingDuration,omitempty"`
	ChargingCapacity uint32                                    `protobuf:"varint,5,opt,name=ChargingCapacity" json:"ChargingCapacity,omitempty"`
	ChargingPrice    uint32                                    `protobuf:"varint,6,opt,name=ChargingPrice" json:"ChargingPrice,omitempty"`
	// id
	Id uint32 `protobuf:"varint,7,opt,name=id" json:"id,omitempty"`
	// 所属充电站id
	StationId uint32 `protobuf:"varint,8,opt,name=stationId" json:"stationId,omitempty"`
	// 终端类型id
	TerminalTypeId uint32 `protobuf:"varint,9,opt,name=terminalTypeId" json:"terminalTypeId,omitempty"`
	// 额定功率 单位：KW
	RatedPower float64 `protobuf:"fixed64,10,opt,name=ratedPower" json:"ratedPower,omitempty"`
	// 电流类型 0：交流，1：直流
	ElectricCurrentType uint32 `protobuf:"varint,11,opt,name=electricCurrentType" json:"electricCurrentType,omitempty"`
	// 输入电压 单位：伏特
	VoltageInput uint32 `protobuf:"varint,12,opt,name=voltageInput" json:"voltageInput,omitempty"`
	// 输出电压 单位：伏特
	VoltageOutput uint32 `protobuf:"varint,13,opt,name=voltageOutput" json:"voltageOutput,omitempty"`
	// 输出电流 单位：安培
	ElectricCurrentOutput uint32 `protobuf:"varint,14,opt,name=electricCurrentOutput" json:"electricCurrentOutput,omitempty"`
	// 枪个数
	GunNumber uint32 `protobuf:"varint,15,opt,name=gunNumber" json:"gunNumber,omitempty"`
	// 电表读数
	AmmeterNumber float64 `protobuf:"fixed64,16,opt,name=ammeterNumber" json:"ammeterNumber,omitempty"`
	// 充电桩编码 车位号
	Code uint32 `protobuf:"varint,17,opt,name=code" json:"code,omitempty"`
	// 当前订单的订单号 30位（14位日期+16为cpid）
	CurrentOrderNumber string `protobuf:"bytes,18,opt,name=currentOrderNumber" json:"currentOrderNumber,omitempty"`
	// 接口 0:RS232,1:RS485,2:CAN,3:USB,4:RJ45,5:RS232(DEBUG)
	InterfaceType uint32 `protobuf:"varint,19,opt,name=interfaceType" json:"interfaceType,omitempty"`
	// 波特率 0:9600,1:14400,2:19200,3:38400,4:576005,5:115200
	BaudRate  uint32 `protobuf:"varint,20,opt,name=baudRate" json:"baudRate,omitempty"`
	Timestamp uint64 `protobuf:"varint,21,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *ChargingPileStatus) Reset()                    { *m = ChargingPileStatus{} }
func (m *ChargingPileStatus) String() string            { return proto.CompactTextString(m) }
func (*ChargingPileStatus) ProtoMessage()               {}
func (*ChargingPileStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChargingPileStatus) GetDasUuid() string {
	if m != nil {
		return m.DasUuid
	}
	return ""
}

func (m *ChargingPileStatus) GetCpid() uint64 {
	if m != nil {
		return m.Cpid
	}
	return 0
}

func (m *ChargingPileStatus) GetStatus() ChargingPileStatus_ChargingPileStatusType {
	if m != nil {
		return m.Status
	}
	return ChargingPileStatus_IDLE
}

func (m *ChargingPileStatus) GetChargingDuration() uint32 {
	if m != nil {
		return m.ChargingDuration
	}
	return 0
}

func (m *ChargingPileStatus) GetChargingCapacity() uint32 {
	if m != nil {
		return m.ChargingCapacity
	}
	return 0
}

func (m *ChargingPileStatus) GetChargingPrice() uint32 {
	if m != nil {
		return m.ChargingPrice
	}
	return 0
}

func (m *ChargingPileStatus) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChargingPileStatus) GetStationId() uint32 {
	if m != nil {
		return m.StationId
	}
	return 0
}

func (m *ChargingPileStatus) GetTerminalTypeId() uint32 {
	if m != nil {
		return m.TerminalTypeId
	}
	return 0
}

func (m *ChargingPileStatus) GetRatedPower() float64 {
	if m != nil {
		return m.RatedPower
	}
	return 0
}

func (m *ChargingPileStatus) GetElectricCurrentType() uint32 {
	if m != nil {
		return m.ElectricCurrentType
	}
	return 0
}

func (m *ChargingPileStatus) GetVoltageInput() uint32 {
	if m != nil {
		return m.VoltageInput
	}
	return 0
}

func (m *ChargingPileStatus) GetVoltageOutput() uint32 {
	if m != nil {
		return m.VoltageOutput
	}
	return 0
}

func (m *ChargingPileStatus) GetElectricCurrentOutput() uint32 {
	if m != nil {
		return m.ElectricCurrentOutput
	}
	return 0
}

func (m *ChargingPileStatus) GetGunNumber() uint32 {
	if m != nil {
		return m.GunNumber
	}
	return 0
}

func (m *ChargingPileStatus) GetAmmeterNumber() float64 {
	if m != nil {
		return m.AmmeterNumber
	}
	return 0
}

func (m *ChargingPileStatus) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ChargingPileStatus) GetCurrentOrderNumber() string {
	if m != nil {
		return m.CurrentOrderNumber
	}
	return ""
}

func (m *ChargingPileStatus) GetInterfaceType() uint32 {
	if m != nil {
		return m.InterfaceType
	}
	return 0
}

func (m *ChargingPileStatus) GetBaudRate() uint32 {
	if m != nil {
		return m.BaudRate
	}
	return 0
}

func (m *ChargingPileStatus) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*ChargingPileStatus)(nil), "Report.ChargingPileStatus")
	proto.RegisterEnum("Report.ChargingPileStatus_ChargingPileStatusType", ChargingPileStatus_ChargingPileStatusType_name, ChargingPileStatus_ChargingPileStatusType_value)
}

func init() { proto.RegisterFile("charge_pile_status.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0xdd, 0x6e, 0xd3, 0x40,
	0x10, 0x85, 0x71, 0xea, 0xa6, 0xc9, 0xc4, 0x49, 0xb7, 0xdb, 0xa6, 0x1a, 0x81, 0x90, 0xac, 0x5e,
	0xf9, 0x2a, 0x12, 0xf0, 0x04, 0xc6, 0x4d, 0x8a, 0xa5, 0xe0, 0x54, 0x21, 0x5c, 0x47, 0x1b, 0xef,
	0x10, 0x16, 0xf9, 0x4f, 0x9b, 0x5d, 0x50, 0x5f, 0x9b, 0x27, 0x40, 0xde, 0xc6, 0x11, 0xe2, 0xe7,
	0xce, 0xfa, 0xce, 0x99, 0x33, 0x47, 0x9e, 0x05, 0xcc, 0xbf, 0x0a, 0xbd, 0xa7, 0x6d, 0xa3, 0x0a,
	0xda, 0x1e, 0x8c, 0x30, 0xf6, 0x30, 0x6b, 0x74, 0x6d, 0x6a, 0xde, 0x5f, 0x53, 0x53, 0x6b, 0x73,
	0xf7, 0xd3, 0x07, 0x9e, 0xb4, 0x26, 0x55, 0xed, 0x1f, 0x55, 0x41, 0x9f, 0x9c, 0x89, 0x33, 0x18,
	0x48, 0x71, 0xd8, 0x5a, 0xab, 0x24, 0x7a, 0xa1, 0x17, 0x0d, 0x79, 0x00, 0x7e, 0xde, 0x28, 0x89,
	0xbd, 0xd0, 0x8b, 0x7c, 0x1e, 0x43, 0xff, 0x39, 0x0e, 0xcf, 0x42, 0x2f, 0x9a, 0xbc, 0x7d, 0x33,
	0x7b, 0xce, 0x9b, 0xfd, 0x9d, 0xf5, 0x0f, 0xb4, 0x79, 0x6a, 0x88, 0x23, 0xb0, 0x4e, 0xb9, 0xb7,
	0x5a, 0x18, 0x55, 0x57, 0xe8, 0x87, 0x5e, 0x34, 0xfe, 0x5d, 0x49, 0x44, 0x23, 0x72, 0x65, 0x9e,
	0xf0, 0xdc, 0x29, 0x53, 0x18, 0x9f, 0xd2, 0xb4, 0xca, 0x09, 0xfb, 0x0e, 0x03, 0xf4, 0x94, 0xc4,
	0x0b, 0xf7, 0x7d, 0x05, 0xc3, 0xb6, 0x99, 0xaa, 0xab, 0x54, 0xe2, 0xc0, 0xa1, 0x5b, 0x98, 0x18,
	0xd2, 0xa5, 0xaa, 0x44, 0xd1, 0x6e, 0x4e, 0x25, 0x0e, 0x1d, 0xe7, 0x00, 0x5a, 0x18, 0x92, 0x8f,
	0xf5, 0x0f, 0xd2, 0x08, 0xa1, 0x17, 0x79, 0xfc, 0x15, 0x5c, 0x53, 0x41, 0xb9, 0xd1, 0x2a, 0x4f,
	0xac, 0xd6, 0x54, 0x99, 0x76, 0x04, 0x47, 0x6e, 0xe0, 0x06, 0x82, 0xef, 0x75, 0x61, 0xc4, 0x9e,
	0xd2, 0xaa, 0xb1, 0x06, 0x83, 0xae, 0xd4, 0x91, 0xae, 0xac, 0x69, 0xf1, 0xd8, 0xe1, 0xd7, 0x30,
	0xfd, 0x23, 0xe9, 0x28, 0x4f, 0xba, 0x9e, 0x7b, 0x5b, 0x65, 0xb6, 0xdc, 0x91, 0xc6, 0xcb, 0x2e,
	0x48, 0x94, 0x25, 0x19, 0xd2, 0x47, 0xcc, 0x5c, 0xa5, 0xf6, 0xcf, 0xd7, 0x92, 0xf0, 0xca, 0x99,
	0x5e, 0x02, 0xcf, 0x8f, 0x71, 0x5a, 0x9e, 0x9c, 0xdc, 0xdd, 0x68, 0x0a, 0x63, 0x55, 0x19, 0xd2,
	0x5f, 0x44, 0x4e, 0xae, 0xf6, 0xb5, 0x1b, 0x61, 0x30, 0xd8, 0x09, 0x2b, 0xd7, 0xc2, 0x10, 0xde,
	0x74, 0xcb, 0x37, 0xaa, 0xa4, 0x83, 0x11, 0x65, 0x83, 0xd3, 0xf6, 0xa2, 0x77, 0xdf, 0xe0, 0xf6,
	0x3f, 0x87, 0x1a, 0x80, 0x9f, 0xde, 0x2f, 0xe7, 0xec, 0x05, 0x0f, 0x60, 0x90, 0x7c, 0x88, 0xd7,
	0x0f, 0x69, 0xf6, 0xc0, 0x3c, 0xce, 0x20, 0xd8, 0xac, 0xde, 0xcf, 0x4f, 0xa4, 0xd7, 0x3a, 0x17,
	0x9f, 0x97, 0x4b, 0x76, 0xc6, 0x2f, 0x61, 0xf4, 0x31, 0x4e, 0xb3, 0x4d, 0x9c, 0x66, 0x71, 0x32,
	0x67, 0x3e, 0x1f, 0xc1, 0xc5, 0x6a, 0xb1, 0x58, 0xa6, 0xd9, 0x9c, 0x9d, 0xef, 0xfa, 0xee, 0x0d,
	0xbe, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0x86, 0x73, 0x54, 0x73, 0x9f, 0x02, 0x00, 0x00,
}
