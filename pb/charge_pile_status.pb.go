// Code generated by protoc-gen-go.
// source: charge_pile_status.proto
// DO NOT EDIT!

/*
Package Report is a generated protocol buffer package.

It is generated from these files:
	charge_pile_status.proto
	charge_station_status.proto

It has these top-level messages:
	ChargingPileStatus
	ChargingStationStatus
*/
package Report

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChargingPileStatus struct {
	DasUuid          string `protobuf:"bytes,1,opt,name=das_uuid" json:"das_uuid,omitempty"`
	Cpid             uint64 `protobuf:"varint,2,opt,name=cpid" json:"cpid,omitempty"`
	Status           uint32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	ChargingDuration uint32 `protobuf:"varint,4,opt,name=ChargingDuration" json:"ChargingDuration,omitempty"`
	ChargingCapacity uint32 `protobuf:"varint,5,opt,name=ChargingCapacity" json:"ChargingCapacity,omitempty"`
	ChargingPrice    uint32 `protobuf:"varint,6,opt,name=ChargingPrice" json:"ChargingPrice,omitempty"`
	// id
	Id uint32 `protobuf:"varint,7,opt,name=id" json:"id,omitempty"`
	// 所属充电站id
	StationId uint32 `protobuf:"varint,8,opt,name=stationId" json:"stationId,omitempty"`
	// 终端类型id
	TerminalTypeId uint32 `protobuf:"varint,9,opt,name=terminalTypeId" json:"terminalTypeId,omitempty"`
	// 额定功率 单位：KW
	RatedPower float64 `protobuf:"fixed64,10,opt,name=ratedPower" json:"ratedPower,omitempty"`
	// 电流类型 0：交流，1：直流
	ElectricCurrentType uint32 `protobuf:"varint,11,opt,name=electricCurrentType" json:"electricCurrentType,omitempty"`
	// 输入电压 单位：伏特
	VoltageInput uint32 `protobuf:"varint,12,opt,name=voltageInput" json:"voltageInput,omitempty"`
	// 输出电压 单位：伏特
	VoltageOutput uint32 `protobuf:"varint,13,opt,name=voltageOutput" json:"voltageOutput,omitempty"`
	// 输出电流 单位：安培
	ElectricCurrentOutput uint32 `protobuf:"varint,14,opt,name=electricCurrentOutput" json:"electricCurrentOutput,omitempty"`
	// 枪个数
	GunNumber uint32 `protobuf:"varint,15,opt,name=gunNumber" json:"gunNumber,omitempty"`
	// 电表读数 uint32 单位0.1度
	AmmeterNumber uint32 `protobuf:"varint,16,opt,name=ammeterNumber" json:"ammeterNumber,omitempty"`
	// 充电桩编码 车位号
	Code uint32 `protobuf:"varint,17,opt,name=code" json:"code,omitempty"`
	// 当前订单的订单号 30位（14位日期+16为cpid）
	CurrentOrderNumber string `protobuf:"bytes,18,opt,name=currentOrderNumber" json:"currentOrderNumber,omitempty"`
	// 接口 0:RS232,1:RS485,2:CAN,3:USB,4:RJ45,5:RS232(DEBUG)
	InterfaceType uint32 `protobuf:"varint,19,opt,name=interfaceType" json:"interfaceType,omitempty"`
	// 波特率 0:9600,1:14400,2:19200,3:38400,4:576005,5:115200
	BaudRate  uint32 `protobuf:"varint,20,opt,name=baudRate" json:"baudRate,omitempty"`
	Timestamp uint64 `protobuf:"varint,21,opt,name=Timestamp" json:"Timestamp,omitempty"`
	// 实时电流 0.1安 * 1000
	RealTimeCurrent uint32 `protobuf:"varint,22,opt,name=RealTimeCurrent" json:"RealTimeCurrent,omitempty"`
	// 实时电压 1福特 * 1000
	RealTimeVoltage uint32 `protobuf:"varint,23,opt,name=RealTimeVoltage" json:"RealTimeVoltage,omitempty"`
}

func (m *ChargingPileStatus) Reset()                    { *m = ChargingPileStatus{} }
func (m *ChargingPileStatus) String() string            { return proto.CompactTextString(m) }
func (*ChargingPileStatus) ProtoMessage()               {}
func (*ChargingPileStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChargingPileStatus) GetDasUuid() string {
	if m != nil {
		return m.DasUuid
	}
	return ""
}

func (m *ChargingPileStatus) GetCpid() uint64 {
	if m != nil {
		return m.Cpid
	}
	return 0
}

func (m *ChargingPileStatus) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ChargingPileStatus) GetChargingDuration() uint32 {
	if m != nil {
		return m.ChargingDuration
	}
	return 0
}

func (m *ChargingPileStatus) GetChargingCapacity() uint32 {
	if m != nil {
		return m.ChargingCapacity
	}
	return 0
}

func (m *ChargingPileStatus) GetChargingPrice() uint32 {
	if m != nil {
		return m.ChargingPrice
	}
	return 0
}

func (m *ChargingPileStatus) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChargingPileStatus) GetStationId() uint32 {
	if m != nil {
		return m.StationId
	}
	return 0
}

func (m *ChargingPileStatus) GetTerminalTypeId() uint32 {
	if m != nil {
		return m.TerminalTypeId
	}
	return 0
}

func (m *ChargingPileStatus) GetRatedPower() float64 {
	if m != nil {
		return m.RatedPower
	}
	return 0
}

func (m *ChargingPileStatus) GetElectricCurrentType() uint32 {
	if m != nil {
		return m.ElectricCurrentType
	}
	return 0
}

func (m *ChargingPileStatus) GetVoltageInput() uint32 {
	if m != nil {
		return m.VoltageInput
	}
	return 0
}

func (m *ChargingPileStatus) GetVoltageOutput() uint32 {
	if m != nil {
		return m.VoltageOutput
	}
	return 0
}

func (m *ChargingPileStatus) GetElectricCurrentOutput() uint32 {
	if m != nil {
		return m.ElectricCurrentOutput
	}
	return 0
}

func (m *ChargingPileStatus) GetGunNumber() uint32 {
	if m != nil {
		return m.GunNumber
	}
	return 0
}

func (m *ChargingPileStatus) GetAmmeterNumber() uint32 {
	if m != nil {
		return m.AmmeterNumber
	}
	return 0
}

func (m *ChargingPileStatus) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ChargingPileStatus) GetCurrentOrderNumber() string {
	if m != nil {
		return m.CurrentOrderNumber
	}
	return ""
}

func (m *ChargingPileStatus) GetInterfaceType() uint32 {
	if m != nil {
		return m.InterfaceType
	}
	return 0
}

func (m *ChargingPileStatus) GetBaudRate() uint32 {
	if m != nil {
		return m.BaudRate
	}
	return 0
}

func (m *ChargingPileStatus) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChargingPileStatus) GetRealTimeCurrent() uint32 {
	if m != nil {
		return m.RealTimeCurrent
	}
	return 0
}

func (m *ChargingPileStatus) GetRealTimeVoltage() uint32 {
	if m != nil {
		return m.RealTimeVoltage
	}
	return 0
}

func init() {
	proto.RegisterType((*ChargingPileStatus)(nil), "Report.ChargingPileStatus")
}

func init() { proto.RegisterFile("charge_pile_status.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x92, 0x41, 0x6f, 0xd3, 0x40,
	0x10, 0x85, 0xe5, 0x12, 0x42, 0x32, 0x24, 0xa9, 0xbb, 0xad, 0xdb, 0x11, 0x08, 0xc9, 0xe2, 0xe4,
	0x13, 0x17, 0x7e, 0x42, 0xb8, 0xe4, 0x02, 0x55, 0xa8, 0xb8, 0x46, 0x9b, 0xdd, 0xc1, 0xac, 0x64,
	0xef, 0xae, 0xd6, 0xb3, 0xa0, 0xfe, 0x00, 0xfe, 0x37, 0xf2, 0xd4, 0xae, 0x50, 0x6f, 0xf6, 0xf7,
	0xde, 0xbc, 0x79, 0x5e, 0x2f, 0xa0, 0xf9, 0xa5, 0x53, 0x4b, 0xa7, 0xe8, 0x3a, 0x3a, 0x0d, 0xac,
	0x39, 0x0f, 0x9f, 0x62, 0x0a, 0x1c, 0xd4, 0xf2, 0x48, 0x31, 0x24, 0xfe, 0xf8, 0x77, 0x01, 0x6a,
	0x3f, 0x9a, 0x9c, 0x6f, 0xef, 0x5d, 0x47, 0xdf, 0xc5, 0xa4, 0x4a, 0x58, 0x59, 0x3d, 0x9c, 0x72,
	0x76, 0x16, 0x8b, 0xba, 0x68, 0xd6, 0x6a, 0x03, 0x0b, 0x13, 0x9d, 0xc5, 0x8b, 0xba, 0x68, 0x16,
	0x6a, 0x07, 0xcb, 0xa7, 0x38, 0x7c, 0x55, 0x17, 0xcd, 0x56, 0x21, 0x94, 0x73, 0xca, 0x97, 0x9c,
	0x34, 0xbb, 0xe0, 0x71, 0xf1, 0x52, 0xd9, 0xeb, 0xa8, 0x8d, 0xe3, 0x47, 0x7c, 0x2d, 0x4a, 0x05,
	0xdb, 0xe7, 0xcd, 0xc9, 0x19, 0xc2, 0xa5, 0x60, 0x80, 0x0b, 0x67, 0xf1, 0x8d, 0x3c, 0x5f, 0xc1,
	0x7a, 0x5c, 0xe3, 0x82, 0x3f, 0x58, 0x5c, 0x09, 0xba, 0x85, 0x1d, 0x53, 0xea, 0x9d, 0xd7, 0xdd,
	0xc3, 0x63, 0xa4, 0x83, 0xc5, 0xb5, 0x70, 0x05, 0x90, 0x34, 0x93, 0xbd, 0x0f, 0x7f, 0x28, 0x21,
	0xd4, 0x45, 0x53, 0xa8, 0xf7, 0x70, 0x4d, 0x1d, 0x19, 0x4e, 0xce, 0xec, 0x73, 0x4a, 0xe4, 0x79,
	0x1c, 0xc1, 0xb7, 0x32, 0x70, 0x03, 0x9b, 0xdf, 0xa1, 0x63, 0xdd, 0xd2, 0xc1, 0xc7, 0xcc, 0xb8,
	0x99, 0x4b, 0x4d, 0xf4, 0x5b, 0xe6, 0x11, 0x6f, 0x05, 0x7f, 0x80, 0xea, 0x45, 0xd2, 0x24, 0xef,
	0xe6, 0x9e, 0x6d, 0xf6, 0x5f, 0x73, 0x7f, 0xa6, 0x84, 0x97, 0x73, 0x90, 0xee, 0x7b, 0x62, 0x4a,
	0x13, 0x2e, 0x05, 0x8f, 0xc7, 0x18, 0x2c, 0xe1, 0x95, 0xbc, 0xbd, 0x03, 0x65, 0xa6, 0xb8, 0x64,
	0x9f, 0x9d, 0x4a, 0x0e, 0xbc, 0x82, 0xad, 0xf3, 0x4c, 0xe9, 0xa7, 0x36, 0x24, 0xb5, 0xaf, 0x65,
	0xa4, 0x84, 0xd5, 0x59, 0x67, 0x7b, 0xd4, 0x4c, 0x78, 0x33, 0x2f, 0x7f, 0x70, 0x3d, 0x0d, 0xac,
	0xfb, 0x88, 0x95, 0xfc, 0x9e, 0x3b, 0xb8, 0x3c, 0x92, 0xee, 0x46, 0x3c, 0xd5, 0xc5, 0x5b, 0xf1,
	0xfe, 0x27, 0xfc, 0x78, 0xfa, 0x4c, 0xbc, 0x1b, 0x85, 0xf3, 0x52, 0xae, 0xc5, 0xe7, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x6e, 0x6f, 0xfa, 0xdd, 0x32, 0x02, 0x00, 0x00,
}
